- title @requirement.name

%h2= @requirement.name
%div{:style => 'float:left; width:70%'}
  %p
    %strong Código
    %br
    =h @requirement.code
  
  %p
    %strong Version prevista
    %br
    =@requirement.release_version
  %p
    %strong Descripción
    %br
    = RedCloth.new(@requirement.description).to_html

.boxes
  .box
    %strong Opciones
    %p
      = link_to "Editar", edit_requirement_path(@requirement)
      |
      = link_to "Lista", requirements_path
      |
      = link_to "Eliminar", @requirement, :confirm => 'Estás seguro?', :method => :delete, :class => 'warn'
    %p
      %small{:title => @requirement.updated_at}= "actualizado hace #{time_ago_in_words(@requirement.updated_at)} por #{@requirement.updated_by.login}"


  .box
    %strong Casos de uso
    - @requirement.use_cases.each do |u|
      - @style = "text-decoration: none;"
      - @style += 'color:red' if u.test_cases.nil?
      %p= link_to u.name, u.test_cases.blank? ? edit_use_case_path(u) : u, :style => @style
    %p= link_to "Gestión de relaciones", list_requirements_path

  - total_issues = Issue.find_by_requirements( [@requirement] )
  - unless total_issues.empty?
    .box
      %strong Peticiones relacionadas
      %br
      - total_issues.group_by(&:fixed_version).each_pair do |version, issues|
        %small= version.name rescue "(sin version)"
        - issues.each do |issue|
          %p= link_to_redmine(issue)

  .box
    %strong Histórico
    - ([@requirement] + @requirement.versions.reverse).each do |version|
      %p
        %span{:title => "#{version.date}"}
          = version.status.humanize
          = "hace #{time_ago_in_words(version.date)}"