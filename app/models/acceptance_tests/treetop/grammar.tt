module PPEE
	grammar Grammar

	  include Generic
	  include Table

	  rule root
	    actors white principal extensions {
	      def build
	        result =
	          {
	            :actors => actors.build,
	            :principal => principal.build
	          }
	        result[:extensions] = extensions.build unless extensions.empty?
	        result
	      end
	    }
	  end

	  rule actors
	    comment space* 'Actores:' space line_to_eol eol? {
	      def build
	        line_to_eol.text_value
	      end
	    }
	  end

	  rule principal
	    aliases:aliases? p:preconditions? actions postconditions examples:examples? {
	      def build
	        result = {}
          result[:aliases]        = aliases.build unless aliases.empty?
	        result[:preconditions]  = p.build if p.respond_to?(:build)
	        result[:actions]        = actions.build
	        result[:postconditions] = postconditions.build
	        result[:examples] = examples.build unless examples.empty?
	        result
	      end
	    }
	  end

    rule aliases
	    comment space* 'Alias:' space line_to_eol eol? {
	      def build
	        line_to_eol.text_value
	      end
	    }
    end

	  rule extensions
	    extension* {
	      def build
	        elements.map{|e| e.build }
	      end
	    }
	  end

	  rule extension
	    white preconditions:preconditions? actions:actions_for_extension postconditions examples:examples? {
	      def build
	        result = {}
	        result[:preconditions] = preconditions.build unless preconditions.empty?
	        result[:actions] = actions.build
	        result[:postconditions] = postconditions.build
	        result[:examples] = examples.build unless examples.empty?
	        result
	      end
	    }
	  end

	  rule preconditions
	    comment space* "Dado que" space first_step:line_to_eol eol? table:table? steps comment {
	      def build
	        result = [ first_step.text_value + table.humanize ]
	        result += steps.build
	        result
	      end
	    }
	  end

	  rule actions
	    comment space* "Cuando" space first_step:line_to_eol eol? steps comment {
	      def build
	        result = [ first_step.text_value ]
	        result += steps.build
	        result
	      end
	    }
	  end

	  rule actions_for_extension
	    comment space* "Si" space first_step:line_to_eol eol? steps comment {
	      def build
	        result = [ first_step.text_value ]
	        result += steps.build
	        result
	      end
	    }
	  end

	  rule postconditions
	    comment space* "Entonces" space first_step:line_to_eol eol? steps comment {
	      def build
	        result = [ first_step.text_value ]
	        result += steps.build
	        result
	      end
	    }
	  end

    rule examples
      comment space* "Ejemplos:" eol table white {
        def build
          table.build
        end
      }
    end

	  rule steps
	    step* {
	      def build
	        elements.map{|e| e.build }
	      end
	    }
	  end

	  rule step
	    comment space* "Y" space line_to_eol eol? table:table? comment {
	      def build
          line_to_eol.text_value + table.humanize
	      end
	    }
	  end

	end
end
